/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* EXP :=  IO | AO | OP | cell = CELL
*           
* IO := '\(' _ content = SEQ '\)'
* AO := '\[' _ content = SEQ '\]'
* OP := '\?' _ content = EXP | content = EXP _ '!'
* SEQ := left = EXP _ right = SEQ | content = EXP _
* // _ := '(\s|,)*'
* _ := '\s*'
* CELL := 'C[\d]+(\s*T[\d]+)*'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    EXP_1 = "EXP_1",
    EXP_2 = "EXP_2",
    EXP_3 = "EXP_3",
    EXP_4 = "EXP_4",
    IO = "IO",
    AO = "AO",
    OP_1 = "OP_1",
    OP_2 = "OP_2",
    SEQ_1 = "SEQ_1",
    SEQ_2 = "SEQ_2",
    _ = "_",
    CELL = "CELL",
}
export type EXP = EXP_1 | EXP_2 | EXP_3 | EXP_4;
export type EXP_1 = IO;
export type EXP_2 = AO;
export type EXP_3 = OP;
export interface EXP_4 {
    kind: ASTKinds.EXP_4;
    cell: CELL;
}
export interface IO {
    kind: ASTKinds.IO;
    content: SEQ;
}
export interface AO {
    kind: ASTKinds.AO;
    content: SEQ;
}
export type OP = OP_1 | OP_2;
export interface OP_1 {
    kind: ASTKinds.OP_1;
    content: EXP;
}
export interface OP_2 {
    kind: ASTKinds.OP_2;
    content: EXP;
}
export type SEQ = SEQ_1 | SEQ_2;
export interface SEQ_1 {
    kind: ASTKinds.SEQ_1;
    left: EXP;
    right: SEQ;
}
export interface SEQ_2 {
    kind: ASTKinds.SEQ_2;
    content: EXP;
}
export type _ = string;
export type CELL = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$EXP$memo.clear();
    }
    protected $scope$EXP$memo: Map<number, [Nullable<EXP>, PosInfo]> = new Map();
    public matchEXP($$dpth: number, $$cr?: ErrorTracker): Nullable<EXP> {
        const fn = () => {
            return this.choice<EXP>([
                () => this.matchEXP_1($$dpth + 1, $$cr),
                () => this.matchEXP_2($$dpth + 1, $$cr),
                () => this.matchEXP_3($$dpth + 1, $$cr),
                () => this.matchEXP_4($$dpth + 1, $$cr),
            ]);
        };
        const $scope$pos = this.mark();
        const memo = this.$scope$EXP$memo.get($scope$pos.overallPos);
        if(memo !== undefined) {
            this.reset(memo[1]);
            return memo[0];
        }
        const $scope$oldMemoSafe = this.memoSafe;
        this.memoSafe = false;
        this.$scope$EXP$memo.set($scope$pos.overallPos, [null, $scope$pos]);
        let lastRes: Nullable<EXP> = null;
        let lastPos: PosInfo = $scope$pos;
        for(;;) {
            this.reset($scope$pos);
            const res = fn();
            const end = this.mark();
            if(end.overallPos <= lastPos.overallPos)
                break;
            lastRes = res;
            lastPos = end;
            this.$scope$EXP$memo.set($scope$pos.overallPos, [lastRes, lastPos]);
        }
        this.reset(lastPos);
        this.memoSafe = $scope$oldMemoSafe;
        return lastRes;
    }
    public matchEXP_1($$dpth: number, $$cr?: ErrorTracker): Nullable<EXP_1> {
        return this.matchIO($$dpth + 1, $$cr);
    }
    public matchEXP_2($$dpth: number, $$cr?: ErrorTracker): Nullable<EXP_2> {
        return this.matchAO($$dpth + 1, $$cr);
    }
    public matchEXP_3($$dpth: number, $$cr?: ErrorTracker): Nullable<EXP_3> {
        return this.matchOP($$dpth + 1, $$cr);
    }
    public matchEXP_4($$dpth: number, $$cr?: ErrorTracker): Nullable<EXP_4> {
        return this.run<EXP_4>($$dpth,
            () => {
                let $scope$cell: Nullable<CELL>;
                let $$res: Nullable<EXP_4> = null;
                if (true
                    && ($scope$cell = this.matchCELL($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.EXP_4, cell: $scope$cell};
                }
                return $$res;
            });
    }
    public matchIO($$dpth: number, $$cr?: ErrorTracker): Nullable<IO> {
        return this.run<IO>($$dpth,
            () => {
                let $scope$content: Nullable<SEQ>;
                let $$res: Nullable<IO> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$content = this.matchSEQ($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.IO, content: $scope$content};
                }
                return $$res;
            });
    }
    public matchAO($$dpth: number, $$cr?: ErrorTracker): Nullable<AO> {
        return this.run<AO>($$dpth,
            () => {
                let $scope$content: Nullable<SEQ>;
                let $$res: Nullable<AO> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$content = this.matchSEQ($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.AO, content: $scope$content};
                }
                return $$res;
            });
    }
    public matchOP($$dpth: number, $$cr?: ErrorTracker): Nullable<OP> {
        return this.choice<OP>([
            () => this.matchOP_1($$dpth + 1, $$cr),
            () => this.matchOP_2($$dpth + 1, $$cr),
        ]);
    }
    public matchOP_1($$dpth: number, $$cr?: ErrorTracker): Nullable<OP_1> {
        return this.run<OP_1>($$dpth,
            () => {
                let $scope$content: Nullable<EXP>;
                let $$res: Nullable<OP_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\?)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$content = this.matchEXP($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.OP_1, content: $scope$content};
                }
                return $$res;
            });
    }
    public matchOP_2($$dpth: number, $$cr?: ErrorTracker): Nullable<OP_2> {
        return this.run<OP_2>($$dpth,
            () => {
                let $scope$content: Nullable<EXP>;
                let $$res: Nullable<OP_2> = null;
                if (true
                    && ($scope$content = this.matchEXP($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:!)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.OP_2, content: $scope$content};
                }
                return $$res;
            });
    }
    public matchSEQ($$dpth: number, $$cr?: ErrorTracker): Nullable<SEQ> {
        return this.choice<SEQ>([
            () => this.matchSEQ_1($$dpth + 1, $$cr),
            () => this.matchSEQ_2($$dpth + 1, $$cr),
        ]);
    }
    public matchSEQ_1($$dpth: number, $$cr?: ErrorTracker): Nullable<SEQ_1> {
        return this.run<SEQ_1>($$dpth,
            () => {
                let $scope$left: Nullable<EXP>;
                let $scope$right: Nullable<SEQ>;
                let $$res: Nullable<SEQ_1> = null;
                if (true
                    && ($scope$left = this.matchEXP($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$right = this.matchSEQ($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.SEQ_1, left: $scope$left, right: $scope$right};
                }
                return $$res;
            });
    }
    public matchSEQ_2($$dpth: number, $$cr?: ErrorTracker): Nullable<SEQ_2> {
        return this.run<SEQ_2>($$dpth,
            () => {
                let $scope$content: Nullable<EXP>;
                let $$res: Nullable<SEQ_2> = null;
                if (true
                    && ($scope$content = this.matchEXP($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.SEQ_2, content: $scope$content};
                }
                return $$res;
            });
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.regexAccept(String.raw`(?:\s*)`, $$dpth + 1, $$cr);
    }
    public matchCELL($$dpth: number, $$cr?: ErrorTracker): Nullable<CELL> {
        return this.regexAccept(String.raw`(?:C[\d]+(\s*T[\d]+)*)`, $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchEXP(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchEXP(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchEXP(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<EXP>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}